#!/usr/bin/env ruby
require 'rubygems'
require "json" 
require 'trollop'
require 'open-uri'
require 'contracts'

def Contract.failure_callback(data)
  puts "Oops: expected #{data[:contract]}, got #{data[:arg]} in #{data[:method].name}. Exiting."
  exit
end

include Contracts

Repo = Or[Hash, nil]

Contract nil => String
def find_user
  x = `git config github.user`
  x.chomp
end

Contract String => Repo
def req(url)
    JSON.parse(open("https://api.github.com#{url}").read)
  rescue OpenURI::HTTPError => e
    nil
end

Contract String, String => Repo
def get_repo(user, repo)
  req "/repos/#{user}/#{repo}"
end

Contract String => Repo
def find_user_repo(repo)
  user = find_user
  return nil if user == ""
  get_repo(user, repo)
end

Contract String => Repo
def find_generic_repo(repo)
  results = req "/legacy/repos/search/#{repo}"
  Trollop::die "Couldn't find a url" if results["repositories"].empty?
  Trollop::die "Multiple repos found, not sure which one you wanted.\nTo let me make the choice, rerun with the --best flag" unless results["repositories"].size == 1 || OPTS[:best]
  user = results["repositories"][0]["username"]
  get_repo(user, repo)
end

OPTS = Trollop::options do
  banner <<-EOS
  Find the clone url for any repo on github, quickly.
  Usage: #{$0} [repo name]
  Use it to clone a repo: git clone `ghs [repo name]`
  EOS
  opt :best, "If multiple repos are found, choose the first one."
end

Trollop::die("no repo specified") if ARGV.empty?
result = find_user_repo(ARGV[0]) || find_generic_repo(ARGV[0])
Trollop::die "couldn't find a url." unless result

STDERR.puts %{
==

Matched repository: #{result["name"]}
Description: #{result["description"]}

==
}

puts result["ssh_url"]
